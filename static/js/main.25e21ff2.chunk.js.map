{"version":3,"sources":["utils/index.js","App.js","index.js"],"names":["buildGrid","Array","fill","map","neighbors","matrix","y","x","count","i","j","App","canvasRef","useRef","running","useState","setMatrix","generation","setGeneration","gameSpeed","setGameSpeed","background","color","gameColor","setGameColor","useEffect","col","length","row","cell","ctx","current","getContext","beginPath","rect","fillStyle","stroke","window","setTimeout","requestAnimationFrame","playClick","newMatrix","forEach","column","cellsAround","pause","className","width","height","ref","id","onClick","event","Math","floor","clientX","offsetLeft","clientY","offsetTop","type","value","onChange","e","target","placeholder","Button","random","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2LAAO,SAASA,IACd,OAAO,IAAIC,MAAM,IAAIC,KAAK,MAAMC,KAAI,kBAAM,IAAIF,MAAM,IAAIC,KAAK,MAWxD,SAASE,EAAUC,EAAQC,EAAGC,GAEnC,IADA,IAAIC,EAAQ,EACHC,EAAIH,EAAI,EAAGG,GAAKH,EAAI,EAAGG,IAC9B,IAAK,IAAIC,EAAIH,EAAI,EAAGG,GAAKH,EAAI,EAAGG,IAC1BD,IAAMH,GAAKI,IAAMH,GAGjBE,GAAK,GAAKA,EAAI,IAAMC,GAAK,GAAKA,EAAI,KACpCF,GAASH,EAAOI,GAAGC,IAKzB,OAAOF,E,YC+KMG,MAnMf,WACE,IAAMC,EAAYC,mBACZC,EAAUD,mBAFH,EAGeE,mBAASf,GAHxB,mBAGNK,EAHM,KAGEW,EAHF,OAIuBD,mBAAS,GAJhC,mBAINE,EAJM,KAIMC,EAJN,OAKqBH,mBAAS,KAL9B,mBAKNI,EALM,KAKKC,EALL,OAMqBL,mBAAS,CACzCM,WAAY,UACZC,MAAO,YARI,mBAMNC,EANM,KAMKC,EANL,KAabC,qBAAU,WACR,IAAK,IAAIC,EAAM,EAAGA,EAAMrB,EAAOsB,OAAQD,IACrC,IAAK,IAAIE,EAAM,EAAGA,EAAMvB,EAAOqB,GAAKC,OAAQC,IAAO,CACjD,IAAMC,EAAOxB,EAAOqB,GAAKE,GACnBE,EAAMlB,EAAUmB,QAAQC,WAAW,MAEzCF,EAAIG,YACJH,EAAII,KAAW,GAANR,EAAgB,GAANE,EAAU,GAAI,IACjCE,EAAIK,UAAYN,EAAON,EAAUD,MAAQC,EAAUF,WACnDS,EAAI5B,OACJ4B,EAAIM,SAIJtB,EAAQiB,SACVM,OAAOC,YAAW,WAChBpB,EAAcD,EAAa,GAC3BsB,sBAAsBC,KACrBrB,KAEJ,CAACd,EAAQkB,IAEZ,IAkBIiB,EAAY,WACd,IAAIC,EAAYpC,EAAOF,KAAI,SAACyB,EAAKnB,GAC/B,OAAO,YAAImB,MAGbvB,EAAOqC,SAAQ,SAACd,EAAKnB,GACnBmB,EAAIc,SAAQ,SAACC,EAAQjC,GACnB,IAAIkC,EAAcxC,EAAUC,EAAQI,EAAGC,GAExB,IAAXiC,GAAgBC,EAAc,GAEZ,IAAXD,GAAgBC,EAAc,EADvCH,EAAUhC,GAAGC,GAAK,EAGE,IAAXiC,GAAgC,IAAhBC,IACzBH,EAAUhC,GAAGC,GAAK,SAIxBM,EAAUyB,IAmBZrC,IAEA,IAMIyC,EAAQ,WACV/B,EAAQiB,SAAU,GAepB,OACE,yBAAKe,UAAU,OACb,4BAAQA,UAAU,cAAlB,oCACA,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,MAAd,gBAAiC7B,EAAjC,KAEA,yBAAK6B,UAAU,eACb,4BACEC,MAAM,MACNC,OAAO,MACPC,IAAKrC,EACLsC,GAAG,OACHJ,UAAU,SACVK,QAtDQ,SAACC,GACnB,IAAM7C,EAAI8C,KAAKC,OAAOF,EAAMG,QAAU3C,EAAUmB,QAAQyB,YAAc,IAChElD,EAAI+C,KAAKC,OAAOF,EAAMK,QAAU7C,EAAUmB,QAAQ2B,WAAa,IAE/DjB,EAAYpC,EAAOF,KAAI,SAACyB,EAAKnB,GACjC,OAAOmB,EAAIzB,KAAI,SAACwC,EAAQjC,GACtB,OAAID,IAAMF,GAAKG,IAAMJ,EACD,IAAXqC,EAAe,EAAI,EAErBA,QAIX3B,EAAUyB,MA2CF,yBAAKK,UAAU,cACb,4CACA,4CACA,4CACA,8CAIJ,yBAAKA,UAAU,gBACb,2BACEa,KAAK,QACLC,MAAOrC,EAAUF,WACjBwC,SApCE,SAACC,GACbtC,EAAa,CAAEH,WAAYyC,EAAEC,OAAOH,MAAOtC,MAAOC,EAAUD,SAoClD0C,YAAY,eAEd,2BACEL,KAAK,QACLC,MAAOrC,EAAUD,MACjBuC,SAtCO,SAACC,GAClBtC,EAAa,CAAEH,WAAYE,EAAUF,WAAYC,MAAOwC,EAAEC,OAAOH,WAwCzD,kBAACK,EAAA,EAAD,CAAQ3C,MAAM,UAAU6B,QA3DvB,WACTrC,EAAQiB,SAAU,EAClBQ,sBAAsBC,GACtBtB,EAAcD,EAAa,KAwDnB,QAGA,kBAACgD,EAAA,EAAD,CAAQ3C,MAAM,UAAU6B,QAASN,GAAjC,SAGA,kBAACoB,EAAA,EAAD,CAAQ3C,MAAM,UAAU6B,QAjHjB,WACfN,IAEAR,OAAOC,YAAW,WAChBtB,EAAUhB,KACVkB,EAAc,KACbC,KA2GK,SAGA,kBAAC8C,EAAA,EAAD,CAAQd,QA7HA,WAChBN,IAEAR,OAAOC,YAAW,WAChBtB,EDvCG,IAAIf,MAAM,IACdC,KAAK,MACLC,KAAI,kBACH,IAAIF,MAAM,IAAIC,KAAK,MAAMC,KAAI,kBAAMkD,KAAKC,MAAsB,EAAhBD,KAAKa,iBCqCnDhD,EAAc,KACbC,KAuHK,UACA,4BAAQ2B,UAAU,SAASc,MAAOzC,EAAW0C,SA3DzC,SAACC,GACb1C,EAAa0C,EAAEC,OAAOH,SA2DZ,4BAAQA,MAAO,KAAf,QACA,4BAAQA,MAAO,KAAf,UACA,4BAAQA,MAAO,KAAf,WAKN,yBAAKd,UAAU,gBACb,wBAAIA,UAAU,MAAd,WACA,wBAAIA,UAAU,MACZ,iHAIA,gHAIA,iHAIA,iI,MCxLZqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.25e21ff2.chunk.js","sourcesContent":["export function buildGrid() {\n  return new Array(25).fill(null).map(() => new Array(25).fill(0));\n}\n\nexport function randomGrid() {\n  return new Array(25)\n    .fill(null)\n    .map(() =>\n      new Array(25).fill(null).map(() => Math.floor(Math.random() * 2))\n    );\n}\n\nexport function neighbors(matrix, y, x) {\n  let count = 0;\n  for (let i = y - 1; i <= y + 1; i++) {\n    for (let j = x - 1; j <= x + 1; j++) {\n      if (i === y && j === x) {\n        continue;\n      }\n      if (i >= 0 && i < 25 && j >= 0 && j < 25) {\n        count += matrix[i][j];\n      }\n    }\n  }\n\n  return count;\n}\n","import React, { useEffect, useState, useRef } from 'react';\nimport './App.css';\nimport { randomGrid, buildGrid, neighbors } from './utils';\nimport { Button } from 'reactstrap';\n\nfunction App() {\n  const canvasRef = useRef();\n  const running = useRef();\n  const [matrix, setMatrix] = useState(buildGrid);\n  const [generation, setGeneration] = useState(0);\n  const [gameSpeed, setGameSpeed] = useState(1000);\n  const [gameColor, setGameColor] = useState({\n    background: '#808080',\n    color: '#008000',\n  });\n\n  // const nextGen = matrix.map((arr) => [...arr]);\n\n  useEffect(() => {\n    for (let col = 0; col < matrix.length; col++) {\n      for (let row = 0; row < matrix[col].length; row++) {\n        const cell = matrix[col][row];\n        const ctx = canvasRef.current.getContext('2d');\n\n        ctx.beginPath();\n        ctx.rect(col * 16, row * 16, 16, 16);\n        ctx.fillStyle = cell ? gameColor.color : gameColor.background;\n        ctx.fill();\n        ctx.stroke();\n      }\n    }\n\n    if (running.current) {\n      window.setTimeout(() => {\n        setGeneration(generation + 1);\n        requestAnimationFrame(playClick);\n      }, gameSpeed);\n    }\n  }, [matrix, gameColor]);\n\n  let randomClick = () => {\n    pause();\n\n    window.setTimeout(() => {\n      setMatrix(randomGrid());\n      setGeneration(0);\n    }, gameSpeed);\n  };\n\n  let clearClick = () => {\n    pause();\n\n    window.setTimeout(() => {\n      setMatrix(buildGrid());\n      setGeneration(0);\n    }, gameSpeed);\n  };\n\n  let playClick = () => {\n    let newMatrix = matrix.map((row, i) => {\n      return [...row];\n    });\n\n    matrix.forEach((row, i) => {\n      row.forEach((column, j) => {\n        let cellsAround = neighbors(matrix, i, j);\n\n        if (column === 1 && cellsAround < 2) {\n          newMatrix[i][j] = 0;\n        } else if (column === 1 && cellsAround > 3) {\n          newMatrix[i][j] = 0;\n        } else if (column === 0 && cellsAround === 3) {\n          newMatrix[i][j] = 1;\n        }\n      });\n    });\n    setMatrix(newMatrix);\n  };\n\n  let canvasPainter = (event) => {\n    const x = Math.floor((event.clientX - canvasRef.current.offsetLeft) / 16);\n    const y = Math.floor((event.clientY - canvasRef.current.offsetTop) / 16);\n\n    const newMatrix = matrix.map((row, i) => {\n      return row.map((column, j) => {\n        if (i === x && j === y) {\n          return column === 0 ? 1 : 0;\n        }\n        return column;\n      });\n    });\n\n    setMatrix(newMatrix);\n  };\n\n  neighbors();\n\n  let play = () => {\n    running.current = true;\n    requestAnimationFrame(playClick);\n    setGeneration(generation + 1);\n  };\n\n  let pause = () => {\n    running.current = false;\n  };\n\n  const speed = (e) => {\n    setGameSpeed(e.target.value);\n  };\n\n  const color = (e) => {\n    setGameColor({ background: e.target.value, color: gameColor.color });\n  };\n\n  const pixelColor = (e) => {\n    setGameColor({ background: gameColor.background, color: e.target.value });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">Welcome to Xavier's Game of Life</header>\n      <div className=\"app-container\">\n        <div className=\"canvasSection\">\n          <h1 className=\"h1\">Generation : {generation} </h1>\n\n          <div className=\"gameSection\">\n            <canvas\n              width=\"400\"\n              height=\"400\"\n              ref={canvasRef}\n              id=\"game\"\n              className=\"canvas\"\n              onClick={canvasPainter}\n            ></canvas>\n            <div className=\"buttonSide\">\n              <button>Preset 1</button>\n              <button>Preset 2</button>\n              <button>Preset 3</button>\n              <button>Preset 4</button>\n            </div>\n          </div>\n\n          <div className=\"buttonBottom\">\n            <input\n              type=\"color\"\n              value={gameColor.background}\n              onChange={color}\n              placeholder=\"background\"\n            ></input>\n            <input\n              type=\"color\"\n              value={gameColor.color}\n              onChange={pixelColor}\n            ></input>\n\n            <Button color=\"success\" onClick={play}>\n              Play\n            </Button>\n            <Button color=\"primary\" onClick={pause}>\n              Pause\n            </Button>\n            <Button color=\"warning\" onClick={clearClick}>\n              Clear\n            </Button>\n            <Button onClick={randomClick}>Random</Button>\n            <select className=\"speeds\" value={gameSpeed} onChange={speed}>\n              <option value={1000}>Slow</option>\n              <option value={500}>Normal</option>\n              <option value={100}>Fast</option>\n            </select>\n          </div>\n        </div>\n\n        <div className=\"rulesSection\">\n          <h1 className=\"h1\">Rules :</h1>\n          <ul className=\"ul\">\n            <li>\n              Any live cell with fewer than two live neighbours dies, as if by\n              underpopulation.\n            </li>\n            <li>\n              Any live cell with two or three live neighbours lives on to the\n              next generation.\n            </li>\n            <li>\n              Any live cell with more than three live neighbours dies, as if by\n              overpopulation.\n            </li>\n            <li>\n              Any dead cell with exactly three live neighbours becomes a live\n              cell, as if by reproduction.\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}